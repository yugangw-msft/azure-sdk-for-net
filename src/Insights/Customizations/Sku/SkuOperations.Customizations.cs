// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.Insights;
using Microsoft.Azure.Management.Insights.Models;
using Microsoft.WindowsAzure;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Insights
{
    /// <summary>
    /// Operations for managing resources sku.
    /// </summary>
    internal partial class SkuOperations : IServiceOperations<InsightsManagementClient>, ISkuOperations
    {
        // Uri templates for currently supported types
        private static readonly Uri BaseUri = new Uri("http://localhost.com");
        private static readonly List<UriTemplate> SupportedUriTemplates = new List<UriTemplate>()
        {
            // currently only server farm is supported
            new UriTemplate("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.web/serverFarms/{serverFarmName}", true)
        }; 

        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<SkuListResponse> ListAvailableSkusAsync(string resourceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }

            // Confirm resourceId is supported
            if (!IsSupportedResourceType(resourceId))
            {
                throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture, "Manual scaling not currently supported for resourceId {0}", resourceId));
            }

            // Antares does not currently support the new contract and has no API to get all valid SKUs so these are hardcoded for now.
            SkuListResponse response = new SkuListResponse
            {
                StatusCode = HttpStatusCode.OK,
                Skus = new SkuCollection
                {
                    Value = new List<Sku>
                    {
                        new Sku
                        {
                            Name = "S1",
                            Tier = "Standard",
                            Capacity = new Capacity()
                            {
                                Minimum = 1,
                                Maximum = 10,
                                Default = 1,
                                ScaleType = SupportedScaleType.Automatic
                            }
                        },
                        new Sku
                        {
                            Name = "S2",
                            Tier = "Standard",
                            Capacity = new Capacity()
                            {
                                Minimum = 1,
                                Maximum = 10,
                                Default = 1,
                                ScaleType = SupportedScaleType.Automatic
                            }
                        },
                        new Sku
                        {
                            Name = "S3",
                            Tier = "Standard",
                            Capacity = new Capacity()
                            {
                                Minimum = 1,
                                Maximum = 10,
                                Default = 1,
                                ScaleType = SupportedScaleType.Automatic
                            }
                        },
                        new Sku
                        {
                            Name = "B1",
                            Tier = "Basic",
                            Capacity = new Capacity()
                            {
                                Minimum = 1,
                                Maximum = 3,
                                Default = 1,
                                ScaleType = SupportedScaleType.Manual
                            }
                        },
                        new Sku
                        {
                            Name = "B2",
                            Tier = "Basic",
                            Capacity = new Capacity()
                            {
                                Minimum = 1,
                                Maximum = 3,
                                Default = 1,
                                ScaleType = SupportedScaleType.Manual
                            }
                        },
                        new Sku
                        {
                            Name = "B3",
                            Tier = "Basic",
                            Capacity = new Capacity()
                            {
                                Minimum = 1,
                                Maximum = 3,
                                Default = 1,
                                ScaleType = SupportedScaleType.Manual
                            }
                        },
                        new Sku
                        {
                            Name = "D1",
                            Tier = "Shared",
                            Capacity = new Capacity()
                            {
                                ScaleType = SupportedScaleType.None
                            }
                        },
                        new Sku
                        {
                            Name = "F1",
                            Tier = "Free",
                            Capacity = new Capacity()
                            {
                                ScaleType = SupportedScaleType.None
                            }
                        },
                    }
                }
            };

            return response;
        }

        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<SkuGetResponse> GetCurrentSkuAsync(string resourceId, CancellationToken cancellationToken)
        {
            // Confirm resourceId is supported
            if (!IsSupportedResourceType(resourceId))
            {
                throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture, "Manual scaling not currently supported for resourceId {0}", resourceId));
            }

            AntaresSkuGetResponse response = await this.GetAntaresCurrentSkuInternalAsync(resourceId, cancellationToken);

            return new SkuGetResponse
            {
                Name = SkuOperations.GetSkuName(response.Properties.CurrentWorkerSize, response.Properties.Sku),
                Tier = response.Properties.Sku,
                Capacity = response.Properties.CurrentNumberOfWorkers
            };
        }

        /// <param name='resourceId'>
        /// The resource id.
        /// </param>
        /// <param name='skuName'>
        /// The sku name.
        /// </param>
        /// <param name='skuTier'>
        /// The sku tier.
        /// </param>
        /// <param name='skuCapacity'>
        /// The sku capacity.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public Task<SkuUpdateResponse> UpdateCurrentSkuAsync(string resourceId, string skuName, string skuTier, int skuCapacity, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            if (skuName == null)
            {
                throw new ArgumentNullException("skuName");
            }
            if (skuTier == null)
            {
                throw new ArgumentNullException("skuTier");
            }

            // Confirm resourceId is supported
            if (!IsSupportedResourceType(resourceId))
            {
                throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture, "Manual scaling not currently supported for resourceId {0}", resourceId));
            }

            AntaresSkuUpdateRequest parameters = new AntaresSkuUpdateRequest
            {
                WorkerSize = SkuOperations.GetWorkerSize(skuName),
                Sku = skuTier,
                NumberOfWorkers = skuCapacity
            };

            return this.UpdateAntaresCurrentSkuInternalAsync(resourceId, parameters, cancellationToken);
        }

        // Verify resourceId is of a supported type
        private static bool IsSupportedResourceType(string resourceId)
        {
            // resource is supported if it matches any of the currently supported templates
            return SupportedUriTemplates.Any(template => template.Match(BaseUri, new Uri(BaseUri, resourceId)) != null);
        }

        private static int GetWorkerSize(string skuName)
        {
            switch (skuName)
            {
                case "S1":
                case "B1":
                case "D1":
                case "F1":
                    return 0;
                case "S2":
                case "B2":
                    return 1;
                case "S3":
                case "B3":
                    return 2;
                default:
                    throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "Invalid SKU Name: {0}", skuName));
            }
        }

        private static string GetSkuName(int workerSize, string tier)
        {
            switch (workerSize)
            {
                case 0:
                    switch (tier)
                    {
                        case "Standard":
                            return "S1";
                        case "Basic":
                            return "B1";
                        case "Shared":
                            return "D1";
                        case "Free":
                            return "F1";
                        default:
                            throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "No SKU for tier {0} and worker size {1}", tier, workerSize));
                    }
                case 1:
                    switch (tier)
                    {
                        case "Standard":
                            return "S2";
                        case "Basic":
                            return "B2";
                        default:
                            throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "No SKU for tier {0} and worker size {1}", tier, workerSize));
                    }
                case 2:
                    switch (tier)
                    {
                        case "Standard":
                            return "S3";
                        case "Basic":
                            return "B3";
                        default:
                            throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "No SKU for tier {0} and worker size {1}", tier, workerSize));
                    }
                default:
                    throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "No SKU for tier {0} and worker size {1}", tier, workerSize));
            }
        }
    }
}
