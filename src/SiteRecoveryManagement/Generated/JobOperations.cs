// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.SiteRecovery;
using Microsoft.WindowsAzure.Management.SiteRecovery.Models;

namespace Microsoft.WindowsAzure.Management.SiteRecovery
{
    /// <summary>
    /// Definition for Job Operations.
    /// </summary>
    internal partial class JobOperations : IServiceOperations<SiteRecoveryManagementClient>, IJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the JobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Cancel the job.
        /// </summary>
        /// <param name='jobId'>
        /// Required. Job ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CancelAsync(string jobId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CancelAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/Jobs/";
            url = url + Uri.EscapeDataString(jobId);
            url = url + "/Cancel";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-10-27");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the job details.
        /// </summary>
        /// <param name='jobId'>
        /// Required. Job ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public async Task<JobResponse> GetAsync(string jobId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/Jobs/";
            url = url + Uri.EscapeDataString(jobId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-10-27");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement serviceResourceElement = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceResourceElement != null)
                        {
                            Job serviceResourceInstance = new Job();
                            result.Job = serviceResourceInstance;
                            
                            XElement activityIdElement = serviceResourceElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                            if (activityIdElement != null)
                            {
                                string activityIdInstance = activityIdElement.Value;
                                serviceResourceInstance.ActivityId = activityIdInstance;
                            }
                            
                            XElement startTimestampElement = serviceResourceElement.Element(XName.Get("StartTimestamp", "http://schemas.microsoft.com/windowsazure"));
                            if (startTimestampElement != null)
                            {
                                string startTimestampInstance = startTimestampElement.Value;
                                serviceResourceInstance.StartTimestamp = startTimestampInstance;
                            }
                            
                            XElement endTimestampElement = serviceResourceElement.Element(XName.Get("EndTimestamp", "http://schemas.microsoft.com/windowsazure"));
                            if (endTimestampElement != null)
                            {
                                string endTimestampInstance = endTimestampElement.Value;
                                serviceResourceInstance.EndTimestamp = endTimestampInstance;
                            }
                            
                            XElement allowedActionsSequenceElement = serviceResourceElement.Element(XName.Get("AllowedActions", "http://schemas.microsoft.com/windowsazure"));
                            if (allowedActionsSequenceElement != null)
                            {
                                foreach (XElement allowedActionsElement in allowedActionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                {
                                    serviceResourceInstance.AllowedActions.Add(allowedActionsElement.Value);
                                }
                            }
                            
                            XElement stateElement = serviceResourceElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                serviceResourceInstance.State = stateInstance;
                            }
                            
                            XElement stateDescriptionElement = serviceResourceElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (stateDescriptionElement != null)
                            {
                                string stateDescriptionInstance = stateDescriptionElement.Value;
                                serviceResourceInstance.StateDescription = stateDescriptionInstance;
                            }
                            
                            XElement tasksSequenceElement = serviceResourceElement.Element(XName.Get("Tasks", "http://schemas.microsoft.com/windowsazure"));
                            if (tasksSequenceElement != null)
                            {
                                foreach (XElement tasksElement in tasksSequenceElement.Elements(XName.Get("Task", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    AsrTask taskInstance = new AsrTask();
                                    serviceResourceInstance.Tasks.Add(taskInstance);
                                    
                                    XElement startTimeElement = tasksElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (startTimeElement != null)
                                    {
                                        DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                        taskInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    XElement endTimeElement = tasksElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (endTimeElement != null)
                                    {
                                        DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture);
                                        taskInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    XElement actionsSequenceElement = tasksElement.Element(XName.Get("Actions", "http://schemas.microsoft.com/windowsazure"));
                                    if (actionsSequenceElement != null)
                                    {
                                        foreach (XElement actionsElement in actionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                        {
                                            taskInstance.Actions.Add(actionsElement.Value);
                                        }
                                    }
                                    
                                    XElement taskTypeElement = tasksElement.Element(XName.Get("TaskType", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskTypeElement != null)
                                    {
                                        string taskTypeInstance = taskTypeElement.Value;
                                        taskInstance.TaskType = taskTypeInstance;
                                    }
                                    
                                    XElement taskNameElement = tasksElement.Element(XName.Get("TaskName", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskNameElement != null)
                                    {
                                        string taskNameInstance = taskNameElement.Value;
                                        taskInstance.TaskName = taskNameInstance;
                                    }
                                    
                                    XElement stateElement2 = tasksElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateElement2 != null)
                                    {
                                        string stateInstance2 = stateElement2.Value;
                                        taskInstance.State = stateInstance2;
                                    }
                                    
                                    XElement stateDescriptionElement2 = tasksElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateDescriptionElement2 != null)
                                    {
                                        string stateDescriptionInstance2 = stateDescriptionElement2.Value;
                                        taskInstance.StateDescription = stateDescriptionInstance2;
                                    }
                                    
                                    XElement extendedDetailsElement = tasksElement.Element(XName.Get("ExtendedDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (extendedDetailsElement != null)
                                    {
                                        string extendedDetailsInstance = extendedDetailsElement.Value;
                                        taskInstance.ExtendedDetails = extendedDetailsInstance;
                                    }
                                    
                                    XElement nameElement = tasksElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        taskInstance.Name = nameInstance;
                                    }
                                    
                                    XElement idElement = tasksElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement != null)
                                    {
                                        string idInstance = idElement.Value;
                                        taskInstance.ID = idInstance;
                                    }
                                }
                            }
                            
                            XElement errorsSequenceElement = serviceResourceElement.Element(XName.Get("Errors", "http://schemas.microsoft.com/windowsazure"));
                            if (errorsSequenceElement != null)
                            {
                                foreach (XElement errorsElement in errorsSequenceElement.Elements(XName.Get("ErrorDetails", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ErrorDetails errorDetailsInstance = new ErrorDetails();
                                    serviceResourceInstance.Errors.Add(errorDetailsInstance);
                                    
                                    XElement serviceErrorDetailsElement = errorsElement.Element(XName.Get("ServiceErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (serviceErrorDetailsElement != null)
                                    {
                                        ServiceError serviceErrorDetailsInstance = new ServiceError();
                                        errorDetailsInstance.ServiceErrorDetails = serviceErrorDetailsInstance;
                                        
                                        XElement codeElement = serviceErrorDetailsElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                        if (codeElement != null)
                                        {
                                            string codeInstance = codeElement.Value;
                                            serviceErrorDetailsInstance.Code = codeInstance;
                                        }
                                        
                                        XElement messageElement = serviceErrorDetailsElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                        if (messageElement != null)
                                        {
                                            string messageInstance = messageElement.Value;
                                            serviceErrorDetailsInstance.Message = messageInstance;
                                        }
                                        
                                        XElement possibleCausesElement = serviceErrorDetailsElement.Element(XName.Get("PossibleCauses", "http://schemas.microsoft.com/windowsazure"));
                                        if (possibleCausesElement != null)
                                        {
                                            string possibleCausesInstance = possibleCausesElement.Value;
                                            serviceErrorDetailsInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        XElement recommendedActionElement = serviceErrorDetailsElement.Element(XName.Get("RecommendedAction", "http://schemas.microsoft.com/windowsazure"));
                                        if (recommendedActionElement != null)
                                        {
                                            string recommendedActionInstance = recommendedActionElement.Value;
                                            serviceErrorDetailsInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        XElement activityIdElement2 = serviceErrorDetailsElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                                        if (activityIdElement2 != null)
                                        {
                                            string activityIdInstance2 = activityIdElement2.Value;
                                            serviceErrorDetailsInstance.ActivityId = activityIdInstance2;
                                        }
                                    }
                                    
                                    XElement providerErrorDetailsElement = errorsElement.Element(XName.Get("ProviderErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (providerErrorDetailsElement != null)
                                    {
                                        ProviderError providerErrorDetailsInstance = new ProviderError();
                                        errorDetailsInstance.ProviderErrorDetails = providerErrorDetailsInstance;
                                        
                                        XElement errorCodeElement = providerErrorDetailsElement.Element(XName.Get("ErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorCodeElement != null)
                                        {
                                            int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                            providerErrorDetailsInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        XElement errorMessageElement = providerErrorDetailsElement.Element(XName.Get("ErrorMessage", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorMessageElement != null)
                                        {
                                            string errorMessageInstance = errorMessageElement.Value;
                                            providerErrorDetailsInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        XElement errorIdElement = providerErrorDetailsElement.Element(XName.Get("ErrorId", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorIdElement != null)
                                        {
                                            string errorIdInstance = errorIdElement.Value;
                                            providerErrorDetailsInstance.ErrorId = errorIdInstance;
                                        }
                                        
                                        XElement workflowIdElement = providerErrorDetailsElement.Element(XName.Get("WorkflowId", "http://schemas.microsoft.com/windowsazure"));
                                        if (workflowIdElement != null)
                                        {
                                            string workflowIdInstance = workflowIdElement.Value;
                                            providerErrorDetailsInstance.WorkflowId = workflowIdInstance;
                                        }
                                        
                                        XElement creationTimeUtcElement = providerErrorDetailsElement.Element(XName.Get("CreationTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                                        if (creationTimeUtcElement != null)
                                        {
                                            DateTime creationTimeUtcInstance = DateTime.Parse(creationTimeUtcElement.Value, CultureInfo.InvariantCulture);
                                            providerErrorDetailsInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        XElement errorLevelElement = providerErrorDetailsElement.Element(XName.Get("ErrorLevel", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorLevelElement != null)
                                        {
                                            string errorLevelInstance = errorLevelElement.Value;
                                            providerErrorDetailsInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        XElement affectedObjectsSequenceElement = providerErrorDetailsElement.Element(XName.Get("AffectedObjects", "http://schemas.microsoft.com/windowsazure"));
                                        if (affectedObjectsSequenceElement != null)
                                        {
                                            foreach (XElement affectedObjectsElement in affectedObjectsSequenceElement.Elements(XName.Get("KeyValueOfstringstring", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                            {
                                                string affectedObjectsKey = affectedObjectsElement.Element(XName.Get("Key", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                string affectedObjectsValue = affectedObjectsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                providerErrorDetailsInstance.AffectedObjects.Add(affectedObjectsKey, affectedObjectsValue);
                                            }
                                        }
                                    }
                                    
                                    XElement taskIdElement = errorsElement.Element(XName.Get("TaskId", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskIdElement != null)
                                    {
                                        string taskIdInstance = taskIdElement.Value;
                                        errorDetailsInstance.TaskId = taskIdInstance;
                                    }
                                }
                            }
                            
                            XElement nameElement2 = serviceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null)
                            {
                                string nameInstance2 = nameElement2.Value;
                                serviceResourceInstance.Name = nameInstance2;
                            }
                            
                            XElement idElement2 = serviceResourceElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement2 != null)
                            {
                                string idInstance2 = idElement2.Value;
                                serviceResourceInstance.ID = idInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all jobs.
        /// </summary>
        /// <param name='parameters'>
        /// Optional. Job query parameter.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list Jobs operation.
        /// </returns>
        public async Task<JobListResponse> ListAsync(JobQueryParameter parameters, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/Jobs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-10-27");
            if (parameters != null && parameters.StartTime != null)
            {
                queryParameters.Add("StartTime=" + Uri.EscapeDataString(parameters.StartTime));
            }
            if (parameters != null && parameters.EndTime != null)
            {
                queryParameters.Add("EndTime=" + Uri.EscapeDataString(parameters.EndTime));
            }
            if (parameters != null && parameters.State != null)
            {
                queryParameters.Add("State=" + Uri.EscapeDataString(parameters.State));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement arrayOfServiceResourceSequenceElement = responseDoc.Element(XName.Get("ArrayOfServiceResource", "http://schemas.microsoft.com/windowsazure"));
                        if (arrayOfServiceResourceSequenceElement != null)
                        {
                            foreach (XElement arrayOfServiceResourceElement in arrayOfServiceResourceSequenceElement.Elements(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure")))
                            {
                                Job serviceResourceInstance = new Job();
                                result.Jobs.Add(serviceResourceInstance);
                                
                                XElement activityIdElement = arrayOfServiceResourceElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                                if (activityIdElement != null)
                                {
                                    string activityIdInstance = activityIdElement.Value;
                                    serviceResourceInstance.ActivityId = activityIdInstance;
                                }
                                
                                XElement startTimestampElement = arrayOfServiceResourceElement.Element(XName.Get("StartTimestamp", "http://schemas.microsoft.com/windowsazure"));
                                if (startTimestampElement != null)
                                {
                                    string startTimestampInstance = startTimestampElement.Value;
                                    serviceResourceInstance.StartTimestamp = startTimestampInstance;
                                }
                                
                                XElement endTimestampElement = arrayOfServiceResourceElement.Element(XName.Get("EndTimestamp", "http://schemas.microsoft.com/windowsazure"));
                                if (endTimestampElement != null)
                                {
                                    string endTimestampInstance = endTimestampElement.Value;
                                    serviceResourceInstance.EndTimestamp = endTimestampInstance;
                                }
                                
                                XElement allowedActionsSequenceElement = arrayOfServiceResourceElement.Element(XName.Get("AllowedActions", "http://schemas.microsoft.com/windowsazure"));
                                if (allowedActionsSequenceElement != null)
                                {
                                    foreach (XElement allowedActionsElement in allowedActionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        serviceResourceInstance.AllowedActions.Add(allowedActionsElement.Value);
                                    }
                                }
                                
                                XElement stateElement = arrayOfServiceResourceElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                if (stateElement != null)
                                {
                                    string stateInstance = stateElement.Value;
                                    serviceResourceInstance.State = stateInstance;
                                }
                                
                                XElement stateDescriptionElement = arrayOfServiceResourceElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                                if (stateDescriptionElement != null)
                                {
                                    string stateDescriptionInstance = stateDescriptionElement.Value;
                                    serviceResourceInstance.StateDescription = stateDescriptionInstance;
                                }
                                
                                XElement tasksSequenceElement = arrayOfServiceResourceElement.Element(XName.Get("Tasks", "http://schemas.microsoft.com/windowsazure"));
                                if (tasksSequenceElement != null)
                                {
                                    foreach (XElement tasksElement in tasksSequenceElement.Elements(XName.Get("Task", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        AsrTask taskInstance = new AsrTask();
                                        serviceResourceInstance.Tasks.Add(taskInstance);
                                        
                                        XElement startTimeElement = tasksElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                        if (startTimeElement != null)
                                        {
                                            DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                            taskInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        XElement endTimeElement = tasksElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                        if (endTimeElement != null)
                                        {
                                            DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture);
                                            taskInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        XElement actionsSequenceElement = tasksElement.Element(XName.Get("Actions", "http://schemas.microsoft.com/windowsazure"));
                                        if (actionsSequenceElement != null)
                                        {
                                            foreach (XElement actionsElement in actionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                            {
                                                taskInstance.Actions.Add(actionsElement.Value);
                                            }
                                        }
                                        
                                        XElement taskTypeElement = tasksElement.Element(XName.Get("TaskType", "http://schemas.microsoft.com/windowsazure"));
                                        if (taskTypeElement != null)
                                        {
                                            string taskTypeInstance = taskTypeElement.Value;
                                            taskInstance.TaskType = taskTypeInstance;
                                        }
                                        
                                        XElement taskNameElement = tasksElement.Element(XName.Get("TaskName", "http://schemas.microsoft.com/windowsazure"));
                                        if (taskNameElement != null)
                                        {
                                            string taskNameInstance = taskNameElement.Value;
                                            taskInstance.TaskName = taskNameInstance;
                                        }
                                        
                                        XElement stateElement2 = tasksElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                        if (stateElement2 != null)
                                        {
                                            string stateInstance2 = stateElement2.Value;
                                            taskInstance.State = stateInstance2;
                                        }
                                        
                                        XElement stateDescriptionElement2 = tasksElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                                        if (stateDescriptionElement2 != null)
                                        {
                                            string stateDescriptionInstance2 = stateDescriptionElement2.Value;
                                            taskInstance.StateDescription = stateDescriptionInstance2;
                                        }
                                        
                                        XElement extendedDetailsElement = tasksElement.Element(XName.Get("ExtendedDetails", "http://schemas.microsoft.com/windowsazure"));
                                        if (extendedDetailsElement != null)
                                        {
                                            string extendedDetailsInstance = extendedDetailsElement.Value;
                                            taskInstance.ExtendedDetails = extendedDetailsInstance;
                                        }
                                        
                                        XElement nameElement = tasksElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement != null)
                                        {
                                            string nameInstance = nameElement.Value;
                                            taskInstance.Name = nameInstance;
                                        }
                                        
                                        XElement idElement = tasksElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                        if (idElement != null)
                                        {
                                            string idInstance = idElement.Value;
                                            taskInstance.ID = idInstance;
                                        }
                                    }
                                }
                                
                                XElement errorsSequenceElement = arrayOfServiceResourceElement.Element(XName.Get("Errors", "http://schemas.microsoft.com/windowsazure"));
                                if (errorsSequenceElement != null)
                                {
                                    foreach (XElement errorsElement in errorsSequenceElement.Elements(XName.Get("ErrorDetails", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        serviceResourceInstance.Errors.Add(errorDetailsInstance);
                                        
                                        XElement serviceErrorDetailsElement = errorsElement.Element(XName.Get("ServiceErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                        if (serviceErrorDetailsElement != null)
                                        {
                                            ServiceError serviceErrorDetailsInstance = new ServiceError();
                                            errorDetailsInstance.ServiceErrorDetails = serviceErrorDetailsInstance;
                                            
                                            XElement codeElement = serviceErrorDetailsElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                            if (codeElement != null)
                                            {
                                                string codeInstance = codeElement.Value;
                                                serviceErrorDetailsInstance.Code = codeInstance;
                                            }
                                            
                                            XElement messageElement = serviceErrorDetailsElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                            if (messageElement != null)
                                            {
                                                string messageInstance = messageElement.Value;
                                                serviceErrorDetailsInstance.Message = messageInstance;
                                            }
                                            
                                            XElement possibleCausesElement = serviceErrorDetailsElement.Element(XName.Get("PossibleCauses", "http://schemas.microsoft.com/windowsazure"));
                                            if (possibleCausesElement != null)
                                            {
                                                string possibleCausesInstance = possibleCausesElement.Value;
                                                serviceErrorDetailsInstance.PossibleCauses = possibleCausesInstance;
                                            }
                                            
                                            XElement recommendedActionElement = serviceErrorDetailsElement.Element(XName.Get("RecommendedAction", "http://schemas.microsoft.com/windowsazure"));
                                            if (recommendedActionElement != null)
                                            {
                                                string recommendedActionInstance = recommendedActionElement.Value;
                                                serviceErrorDetailsInstance.RecommendedAction = recommendedActionInstance;
                                            }
                                            
                                            XElement activityIdElement2 = serviceErrorDetailsElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                                            if (activityIdElement2 != null)
                                            {
                                                string activityIdInstance2 = activityIdElement2.Value;
                                                serviceErrorDetailsInstance.ActivityId = activityIdInstance2;
                                            }
                                        }
                                        
                                        XElement providerErrorDetailsElement = errorsElement.Element(XName.Get("ProviderErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                        if (providerErrorDetailsElement != null)
                                        {
                                            ProviderError providerErrorDetailsInstance = new ProviderError();
                                            errorDetailsInstance.ProviderErrorDetails = providerErrorDetailsInstance;
                                            
                                            XElement errorCodeElement = providerErrorDetailsElement.Element(XName.Get("ErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                            if (errorCodeElement != null)
                                            {
                                                int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                                providerErrorDetailsInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            XElement errorMessageElement = providerErrorDetailsElement.Element(XName.Get("ErrorMessage", "http://schemas.microsoft.com/windowsazure"));
                                            if (errorMessageElement != null)
                                            {
                                                string errorMessageInstance = errorMessageElement.Value;
                                                providerErrorDetailsInstance.ErrorMessage = errorMessageInstance;
                                            }
                                            
                                            XElement errorIdElement = providerErrorDetailsElement.Element(XName.Get("ErrorId", "http://schemas.microsoft.com/windowsazure"));
                                            if (errorIdElement != null)
                                            {
                                                string errorIdInstance = errorIdElement.Value;
                                                providerErrorDetailsInstance.ErrorId = errorIdInstance;
                                            }
                                            
                                            XElement workflowIdElement = providerErrorDetailsElement.Element(XName.Get("WorkflowId", "http://schemas.microsoft.com/windowsazure"));
                                            if (workflowIdElement != null)
                                            {
                                                string workflowIdInstance = workflowIdElement.Value;
                                                providerErrorDetailsInstance.WorkflowId = workflowIdInstance;
                                            }
                                            
                                            XElement creationTimeUtcElement = providerErrorDetailsElement.Element(XName.Get("CreationTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                                            if (creationTimeUtcElement != null)
                                            {
                                                DateTime creationTimeUtcInstance = DateTime.Parse(creationTimeUtcElement.Value, CultureInfo.InvariantCulture);
                                                providerErrorDetailsInstance.CreationTimeUtc = creationTimeUtcInstance;
                                            }
                                            
                                            XElement errorLevelElement = providerErrorDetailsElement.Element(XName.Get("ErrorLevel", "http://schemas.microsoft.com/windowsazure"));
                                            if (errorLevelElement != null)
                                            {
                                                string errorLevelInstance = errorLevelElement.Value;
                                                providerErrorDetailsInstance.ErrorLevel = errorLevelInstance;
                                            }
                                            
                                            XElement affectedObjectsSequenceElement = providerErrorDetailsElement.Element(XName.Get("AffectedObjects", "http://schemas.microsoft.com/windowsazure"));
                                            if (affectedObjectsSequenceElement != null)
                                            {
                                                foreach (XElement affectedObjectsElement in affectedObjectsSequenceElement.Elements(XName.Get("KeyValueOfstringstring", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                                {
                                                    string affectedObjectsKey = affectedObjectsElement.Element(XName.Get("Key", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                    string affectedObjectsValue = affectedObjectsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                    providerErrorDetailsInstance.AffectedObjects.Add(affectedObjectsKey, affectedObjectsValue);
                                                }
                                            }
                                        }
                                        
                                        XElement taskIdElement = errorsElement.Element(XName.Get("TaskId", "http://schemas.microsoft.com/windowsazure"));
                                        if (taskIdElement != null)
                                        {
                                            string taskIdInstance = taskIdElement.Value;
                                            errorDetailsInstance.TaskId = taskIdInstance;
                                        }
                                    }
                                }
                                
                                XElement nameElement2 = arrayOfServiceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement2 != null)
                                {
                                    string nameInstance2 = nameElement2.Value;
                                    serviceResourceInstance.Name = nameInstance2;
                                }
                                
                                XElement idElement2 = arrayOfServiceResourceElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                if (idElement2 != null)
                                {
                                    string idInstance2 = idElement2.Value;
                                    serviceResourceInstance.ID = idInstance2;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restart the job.
        /// </summary>
        /// <param name='jobId'>
        /// Required. Job ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public async Task<JobResponse> RestartAsync(string jobId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/Jobs/";
            url = url + Uri.EscapeDataString(jobId);
            url = url + "/Restart";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-10-27");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement serviceResourceElement = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceResourceElement != null)
                        {
                            Job serviceResourceInstance = new Job();
                            result.Job = serviceResourceInstance;
                            
                            XElement activityIdElement = serviceResourceElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                            if (activityIdElement != null)
                            {
                                string activityIdInstance = activityIdElement.Value;
                                serviceResourceInstance.ActivityId = activityIdInstance;
                            }
                            
                            XElement startTimestampElement = serviceResourceElement.Element(XName.Get("StartTimestamp", "http://schemas.microsoft.com/windowsazure"));
                            if (startTimestampElement != null)
                            {
                                string startTimestampInstance = startTimestampElement.Value;
                                serviceResourceInstance.StartTimestamp = startTimestampInstance;
                            }
                            
                            XElement endTimestampElement = serviceResourceElement.Element(XName.Get("EndTimestamp", "http://schemas.microsoft.com/windowsazure"));
                            if (endTimestampElement != null)
                            {
                                string endTimestampInstance = endTimestampElement.Value;
                                serviceResourceInstance.EndTimestamp = endTimestampInstance;
                            }
                            
                            XElement allowedActionsSequenceElement = serviceResourceElement.Element(XName.Get("AllowedActions", "http://schemas.microsoft.com/windowsazure"));
                            if (allowedActionsSequenceElement != null)
                            {
                                foreach (XElement allowedActionsElement in allowedActionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                {
                                    serviceResourceInstance.AllowedActions.Add(allowedActionsElement.Value);
                                }
                            }
                            
                            XElement stateElement = serviceResourceElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                serviceResourceInstance.State = stateInstance;
                            }
                            
                            XElement stateDescriptionElement = serviceResourceElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (stateDescriptionElement != null)
                            {
                                string stateDescriptionInstance = stateDescriptionElement.Value;
                                serviceResourceInstance.StateDescription = stateDescriptionInstance;
                            }
                            
                            XElement tasksSequenceElement = serviceResourceElement.Element(XName.Get("Tasks", "http://schemas.microsoft.com/windowsazure"));
                            if (tasksSequenceElement != null)
                            {
                                foreach (XElement tasksElement in tasksSequenceElement.Elements(XName.Get("Task", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    AsrTask taskInstance = new AsrTask();
                                    serviceResourceInstance.Tasks.Add(taskInstance);
                                    
                                    XElement startTimeElement = tasksElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (startTimeElement != null)
                                    {
                                        DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                        taskInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    XElement endTimeElement = tasksElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (endTimeElement != null)
                                    {
                                        DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture);
                                        taskInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    XElement actionsSequenceElement = tasksElement.Element(XName.Get("Actions", "http://schemas.microsoft.com/windowsazure"));
                                    if (actionsSequenceElement != null)
                                    {
                                        foreach (XElement actionsElement in actionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                        {
                                            taskInstance.Actions.Add(actionsElement.Value);
                                        }
                                    }
                                    
                                    XElement taskTypeElement = tasksElement.Element(XName.Get("TaskType", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskTypeElement != null)
                                    {
                                        string taskTypeInstance = taskTypeElement.Value;
                                        taskInstance.TaskType = taskTypeInstance;
                                    }
                                    
                                    XElement taskNameElement = tasksElement.Element(XName.Get("TaskName", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskNameElement != null)
                                    {
                                        string taskNameInstance = taskNameElement.Value;
                                        taskInstance.TaskName = taskNameInstance;
                                    }
                                    
                                    XElement stateElement2 = tasksElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateElement2 != null)
                                    {
                                        string stateInstance2 = stateElement2.Value;
                                        taskInstance.State = stateInstance2;
                                    }
                                    
                                    XElement stateDescriptionElement2 = tasksElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateDescriptionElement2 != null)
                                    {
                                        string stateDescriptionInstance2 = stateDescriptionElement2.Value;
                                        taskInstance.StateDescription = stateDescriptionInstance2;
                                    }
                                    
                                    XElement extendedDetailsElement = tasksElement.Element(XName.Get("ExtendedDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (extendedDetailsElement != null)
                                    {
                                        string extendedDetailsInstance = extendedDetailsElement.Value;
                                        taskInstance.ExtendedDetails = extendedDetailsInstance;
                                    }
                                    
                                    XElement nameElement = tasksElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        taskInstance.Name = nameInstance;
                                    }
                                    
                                    XElement idElement = tasksElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement != null)
                                    {
                                        string idInstance = idElement.Value;
                                        taskInstance.ID = idInstance;
                                    }
                                }
                            }
                            
                            XElement errorsSequenceElement = serviceResourceElement.Element(XName.Get("Errors", "http://schemas.microsoft.com/windowsazure"));
                            if (errorsSequenceElement != null)
                            {
                                foreach (XElement errorsElement in errorsSequenceElement.Elements(XName.Get("ErrorDetails", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ErrorDetails errorDetailsInstance = new ErrorDetails();
                                    serviceResourceInstance.Errors.Add(errorDetailsInstance);
                                    
                                    XElement serviceErrorDetailsElement = errorsElement.Element(XName.Get("ServiceErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (serviceErrorDetailsElement != null)
                                    {
                                        ServiceError serviceErrorDetailsInstance = new ServiceError();
                                        errorDetailsInstance.ServiceErrorDetails = serviceErrorDetailsInstance;
                                        
                                        XElement codeElement = serviceErrorDetailsElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                        if (codeElement != null)
                                        {
                                            string codeInstance = codeElement.Value;
                                            serviceErrorDetailsInstance.Code = codeInstance;
                                        }
                                        
                                        XElement messageElement = serviceErrorDetailsElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                        if (messageElement != null)
                                        {
                                            string messageInstance = messageElement.Value;
                                            serviceErrorDetailsInstance.Message = messageInstance;
                                        }
                                        
                                        XElement possibleCausesElement = serviceErrorDetailsElement.Element(XName.Get("PossibleCauses", "http://schemas.microsoft.com/windowsazure"));
                                        if (possibleCausesElement != null)
                                        {
                                            string possibleCausesInstance = possibleCausesElement.Value;
                                            serviceErrorDetailsInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        XElement recommendedActionElement = serviceErrorDetailsElement.Element(XName.Get("RecommendedAction", "http://schemas.microsoft.com/windowsazure"));
                                        if (recommendedActionElement != null)
                                        {
                                            string recommendedActionInstance = recommendedActionElement.Value;
                                            serviceErrorDetailsInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        XElement activityIdElement2 = serviceErrorDetailsElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                                        if (activityIdElement2 != null)
                                        {
                                            string activityIdInstance2 = activityIdElement2.Value;
                                            serviceErrorDetailsInstance.ActivityId = activityIdInstance2;
                                        }
                                    }
                                    
                                    XElement providerErrorDetailsElement = errorsElement.Element(XName.Get("ProviderErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (providerErrorDetailsElement != null)
                                    {
                                        ProviderError providerErrorDetailsInstance = new ProviderError();
                                        errorDetailsInstance.ProviderErrorDetails = providerErrorDetailsInstance;
                                        
                                        XElement errorCodeElement = providerErrorDetailsElement.Element(XName.Get("ErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorCodeElement != null)
                                        {
                                            int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                            providerErrorDetailsInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        XElement errorMessageElement = providerErrorDetailsElement.Element(XName.Get("ErrorMessage", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorMessageElement != null)
                                        {
                                            string errorMessageInstance = errorMessageElement.Value;
                                            providerErrorDetailsInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        XElement errorIdElement = providerErrorDetailsElement.Element(XName.Get("ErrorId", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorIdElement != null)
                                        {
                                            string errorIdInstance = errorIdElement.Value;
                                            providerErrorDetailsInstance.ErrorId = errorIdInstance;
                                        }
                                        
                                        XElement workflowIdElement = providerErrorDetailsElement.Element(XName.Get("WorkflowId", "http://schemas.microsoft.com/windowsazure"));
                                        if (workflowIdElement != null)
                                        {
                                            string workflowIdInstance = workflowIdElement.Value;
                                            providerErrorDetailsInstance.WorkflowId = workflowIdInstance;
                                        }
                                        
                                        XElement creationTimeUtcElement = providerErrorDetailsElement.Element(XName.Get("CreationTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                                        if (creationTimeUtcElement != null)
                                        {
                                            DateTime creationTimeUtcInstance = DateTime.Parse(creationTimeUtcElement.Value, CultureInfo.InvariantCulture);
                                            providerErrorDetailsInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        XElement errorLevelElement = providerErrorDetailsElement.Element(XName.Get("ErrorLevel", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorLevelElement != null)
                                        {
                                            string errorLevelInstance = errorLevelElement.Value;
                                            providerErrorDetailsInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        XElement affectedObjectsSequenceElement = providerErrorDetailsElement.Element(XName.Get("AffectedObjects", "http://schemas.microsoft.com/windowsazure"));
                                        if (affectedObjectsSequenceElement != null)
                                        {
                                            foreach (XElement affectedObjectsElement in affectedObjectsSequenceElement.Elements(XName.Get("KeyValueOfstringstring", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                            {
                                                string affectedObjectsKey = affectedObjectsElement.Element(XName.Get("Key", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                string affectedObjectsValue = affectedObjectsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                providerErrorDetailsInstance.AffectedObjects.Add(affectedObjectsKey, affectedObjectsValue);
                                            }
                                        }
                                    }
                                    
                                    XElement taskIdElement = errorsElement.Element(XName.Get("TaskId", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskIdElement != null)
                                    {
                                        string taskIdInstance = taskIdElement.Value;
                                        errorDetailsInstance.TaskId = taskIdInstance;
                                    }
                                }
                            }
                            
                            XElement nameElement2 = serviceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null)
                            {
                                string nameInstance2 = nameElement2.Value;
                                serviceResourceInstance.Name = nameInstance2;
                            }
                            
                            XElement idElement2 = serviceResourceElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement2 != null)
                            {
                                string idInstance2 = idElement2.Value;
                                serviceResourceInstance.ID = idInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Resume the job .
        /// </summary>
        /// <param name='jobId'>
        /// Required. Job ID.
        /// </param>
        /// <param name='resumeJobParameters'>
        /// Optional. Resume job parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public async Task<JobResponse> ResumeAsync(string jobId, ResumeJobParams resumeJobParameters, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("resumeJobParameters", resumeJobParameters);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ResumeAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/Jobs/";
            url = url + Uri.EscapeDataString(jobId);
            url = url + "/Resume";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-10-27");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (resumeJobParameters != null)
                {
                    XElement resumeJobParamsElement = new XElement(XName.Get("ResumeJobParams", "http://schemas.microsoft.com/windowsazure"));
                    requestDoc.Add(resumeJobParamsElement);
                    
                    if (resumeJobParameters.Comments != null)
                    {
                        XElement commentsElement = new XElement(XName.Get("Comments", "http://schemas.microsoft.com/windowsazure"));
                        commentsElement.Value = resumeJobParameters.Comments;
                        resumeJobParamsElement.Add(commentsElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement serviceResourceElement = responseDoc.Element(XName.Get("ServiceResource", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceResourceElement != null)
                        {
                            Job serviceResourceInstance = new Job();
                            result.Job = serviceResourceInstance;
                            
                            XElement activityIdElement = serviceResourceElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                            if (activityIdElement != null)
                            {
                                string activityIdInstance = activityIdElement.Value;
                                serviceResourceInstance.ActivityId = activityIdInstance;
                            }
                            
                            XElement startTimestampElement = serviceResourceElement.Element(XName.Get("StartTimestamp", "http://schemas.microsoft.com/windowsazure"));
                            if (startTimestampElement != null)
                            {
                                string startTimestampInstance = startTimestampElement.Value;
                                serviceResourceInstance.StartTimestamp = startTimestampInstance;
                            }
                            
                            XElement endTimestampElement = serviceResourceElement.Element(XName.Get("EndTimestamp", "http://schemas.microsoft.com/windowsazure"));
                            if (endTimestampElement != null)
                            {
                                string endTimestampInstance = endTimestampElement.Value;
                                serviceResourceInstance.EndTimestamp = endTimestampInstance;
                            }
                            
                            XElement allowedActionsSequenceElement = serviceResourceElement.Element(XName.Get("AllowedActions", "http://schemas.microsoft.com/windowsazure"));
                            if (allowedActionsSequenceElement != null)
                            {
                                foreach (XElement allowedActionsElement in allowedActionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                {
                                    serviceResourceInstance.AllowedActions.Add(allowedActionsElement.Value);
                                }
                            }
                            
                            XElement stateElement = serviceResourceElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                serviceResourceInstance.State = stateInstance;
                            }
                            
                            XElement stateDescriptionElement = serviceResourceElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (stateDescriptionElement != null)
                            {
                                string stateDescriptionInstance = stateDescriptionElement.Value;
                                serviceResourceInstance.StateDescription = stateDescriptionInstance;
                            }
                            
                            XElement tasksSequenceElement = serviceResourceElement.Element(XName.Get("Tasks", "http://schemas.microsoft.com/windowsazure"));
                            if (tasksSequenceElement != null)
                            {
                                foreach (XElement tasksElement in tasksSequenceElement.Elements(XName.Get("Task", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    AsrTask taskInstance = new AsrTask();
                                    serviceResourceInstance.Tasks.Add(taskInstance);
                                    
                                    XElement startTimeElement = tasksElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (startTimeElement != null)
                                    {
                                        DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                        taskInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    XElement endTimeElement = tasksElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (endTimeElement != null)
                                    {
                                        DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture);
                                        taskInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    XElement actionsSequenceElement = tasksElement.Element(XName.Get("Actions", "http://schemas.microsoft.com/windowsazure"));
                                    if (actionsSequenceElement != null)
                                    {
                                        foreach (XElement actionsElement in actionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                        {
                                            taskInstance.Actions.Add(actionsElement.Value);
                                        }
                                    }
                                    
                                    XElement taskTypeElement = tasksElement.Element(XName.Get("TaskType", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskTypeElement != null)
                                    {
                                        string taskTypeInstance = taskTypeElement.Value;
                                        taskInstance.TaskType = taskTypeInstance;
                                    }
                                    
                                    XElement taskNameElement = tasksElement.Element(XName.Get("TaskName", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskNameElement != null)
                                    {
                                        string taskNameInstance = taskNameElement.Value;
                                        taskInstance.TaskName = taskNameInstance;
                                    }
                                    
                                    XElement stateElement2 = tasksElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateElement2 != null)
                                    {
                                        string stateInstance2 = stateElement2.Value;
                                        taskInstance.State = stateInstance2;
                                    }
                                    
                                    XElement stateDescriptionElement2 = tasksElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateDescriptionElement2 != null)
                                    {
                                        string stateDescriptionInstance2 = stateDescriptionElement2.Value;
                                        taskInstance.StateDescription = stateDescriptionInstance2;
                                    }
                                    
                                    XElement extendedDetailsElement = tasksElement.Element(XName.Get("ExtendedDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (extendedDetailsElement != null)
                                    {
                                        string extendedDetailsInstance = extendedDetailsElement.Value;
                                        taskInstance.ExtendedDetails = extendedDetailsInstance;
                                    }
                                    
                                    XElement nameElement = tasksElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        taskInstance.Name = nameInstance;
                                    }
                                    
                                    XElement idElement = tasksElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement != null)
                                    {
                                        string idInstance = idElement.Value;
                                        taskInstance.ID = idInstance;
                                    }
                                }
                            }
                            
                            XElement errorsSequenceElement = serviceResourceElement.Element(XName.Get("Errors", "http://schemas.microsoft.com/windowsazure"));
                            if (errorsSequenceElement != null)
                            {
                                foreach (XElement errorsElement in errorsSequenceElement.Elements(XName.Get("ErrorDetails", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ErrorDetails errorDetailsInstance = new ErrorDetails();
                                    serviceResourceInstance.Errors.Add(errorDetailsInstance);
                                    
                                    XElement serviceErrorDetailsElement = errorsElement.Element(XName.Get("ServiceErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (serviceErrorDetailsElement != null)
                                    {
                                        ServiceError serviceErrorDetailsInstance = new ServiceError();
                                        errorDetailsInstance.ServiceErrorDetails = serviceErrorDetailsInstance;
                                        
                                        XElement codeElement = serviceErrorDetailsElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                        if (codeElement != null)
                                        {
                                            string codeInstance = codeElement.Value;
                                            serviceErrorDetailsInstance.Code = codeInstance;
                                        }
                                        
                                        XElement messageElement = serviceErrorDetailsElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                        if (messageElement != null)
                                        {
                                            string messageInstance = messageElement.Value;
                                            serviceErrorDetailsInstance.Message = messageInstance;
                                        }
                                        
                                        XElement possibleCausesElement = serviceErrorDetailsElement.Element(XName.Get("PossibleCauses", "http://schemas.microsoft.com/windowsazure"));
                                        if (possibleCausesElement != null)
                                        {
                                            string possibleCausesInstance = possibleCausesElement.Value;
                                            serviceErrorDetailsInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        XElement recommendedActionElement = serviceErrorDetailsElement.Element(XName.Get("RecommendedAction", "http://schemas.microsoft.com/windowsazure"));
                                        if (recommendedActionElement != null)
                                        {
                                            string recommendedActionInstance = recommendedActionElement.Value;
                                            serviceErrorDetailsInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        XElement activityIdElement2 = serviceErrorDetailsElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                                        if (activityIdElement2 != null)
                                        {
                                            string activityIdInstance2 = activityIdElement2.Value;
                                            serviceErrorDetailsInstance.ActivityId = activityIdInstance2;
                                        }
                                    }
                                    
                                    XElement providerErrorDetailsElement = errorsElement.Element(XName.Get("ProviderErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (providerErrorDetailsElement != null)
                                    {
                                        ProviderError providerErrorDetailsInstance = new ProviderError();
                                        errorDetailsInstance.ProviderErrorDetails = providerErrorDetailsInstance;
                                        
                                        XElement errorCodeElement = providerErrorDetailsElement.Element(XName.Get("ErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorCodeElement != null)
                                        {
                                            int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                            providerErrorDetailsInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        XElement errorMessageElement = providerErrorDetailsElement.Element(XName.Get("ErrorMessage", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorMessageElement != null)
                                        {
                                            string errorMessageInstance = errorMessageElement.Value;
                                            providerErrorDetailsInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        XElement errorIdElement = providerErrorDetailsElement.Element(XName.Get("ErrorId", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorIdElement != null)
                                        {
                                            string errorIdInstance = errorIdElement.Value;
                                            providerErrorDetailsInstance.ErrorId = errorIdInstance;
                                        }
                                        
                                        XElement workflowIdElement = providerErrorDetailsElement.Element(XName.Get("WorkflowId", "http://schemas.microsoft.com/windowsazure"));
                                        if (workflowIdElement != null)
                                        {
                                            string workflowIdInstance = workflowIdElement.Value;
                                            providerErrorDetailsInstance.WorkflowId = workflowIdInstance;
                                        }
                                        
                                        XElement creationTimeUtcElement = providerErrorDetailsElement.Element(XName.Get("CreationTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                                        if (creationTimeUtcElement != null)
                                        {
                                            DateTime creationTimeUtcInstance = DateTime.Parse(creationTimeUtcElement.Value, CultureInfo.InvariantCulture);
                                            providerErrorDetailsInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        XElement errorLevelElement = providerErrorDetailsElement.Element(XName.Get("ErrorLevel", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorLevelElement != null)
                                        {
                                            string errorLevelInstance = errorLevelElement.Value;
                                            providerErrorDetailsInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        XElement affectedObjectsSequenceElement = providerErrorDetailsElement.Element(XName.Get("AffectedObjects", "http://schemas.microsoft.com/windowsazure"));
                                        if (affectedObjectsSequenceElement != null)
                                        {
                                            foreach (XElement affectedObjectsElement in affectedObjectsSequenceElement.Elements(XName.Get("KeyValueOfstringstring", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                            {
                                                string affectedObjectsKey = affectedObjectsElement.Element(XName.Get("Key", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                string affectedObjectsValue = affectedObjectsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                providerErrorDetailsInstance.AffectedObjects.Add(affectedObjectsKey, affectedObjectsValue);
                                            }
                                        }
                                    }
                                    
                                    XElement taskIdElement = errorsElement.Element(XName.Get("TaskId", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskIdElement != null)
                                    {
                                        string taskIdInstance = taskIdElement.Value;
                                        errorDetailsInstance.TaskId = taskIdInstance;
                                    }
                                }
                            }
                            
                            XElement nameElement2 = serviceResourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null)
                            {
                                string nameInstance2 = nameElement2.Value;
                                serviceResourceInstance.Name = nameInstance2;
                            }
                            
                            XElement idElement2 = serviceResourceElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement2 != null)
                            {
                                string idInstance2 = idElement2.Value;
                                serviceResourceInstance.ID = idInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
