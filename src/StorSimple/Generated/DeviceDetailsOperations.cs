// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// All Operations related to Device Details
    /// </summary>
    internal partial class DeviceDetailsOperations : IServiceOperations<StorSimpleManagementClient>, IDeviceDetailsOperations
    {
        /// <summary>
        /// Initializes a new instance of the DeviceDetailsOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DeviceDetailsOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for device details.
        /// </returns>
        public async Task<DeviceDetailsResponse> GetAsync(string deviceId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CiSVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.3.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeviceDetailsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeviceDetailsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement deviceDetailsElement = responseDoc.Element(XName.Get("DeviceDetails", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (deviceDetailsElement != null)
                        {
                            DeviceDetails deviceDetailsInstance = new DeviceDetails();
                            result.DeviceDetails = deviceDetailsInstance;
                            
                            XElement devicePropertiesElement = deviceDetailsElement.Element(XName.Get("DeviceProperties", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (devicePropertiesElement != null)
                            {
                                DeviceInfo devicePropertiesInstance = new DeviceInfo();
                                deviceDetailsInstance.DeviceProperties = devicePropertiesInstance;
                                
                                XElement friendlyNameElement = devicePropertiesElement.Element(XName.Get("FriendlyName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (friendlyNameElement != null)
                                {
                                    string friendlyNameInstance = friendlyNameElement.Value;
                                    devicePropertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                XElement statusElement = devicePropertiesElement.Element(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (statusElement != null)
                                {
                                    DeviceStatus statusInstance = ((DeviceStatus)Enum.Parse(typeof(DeviceStatus), statusElement.Value, true));
                                    devicePropertiesInstance.Status = statusInstance;
                                }
                                
                                XElement deviceIdElement = devicePropertiesElement.Element(XName.Get("DeviceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (deviceIdElement != null)
                                {
                                    string deviceIdInstance = deviceIdElement.Value;
                                    devicePropertiesInstance.DeviceId = deviceIdInstance;
                                }
                                
                                XElement serialNumberElement = devicePropertiesElement.Element(XName.Get("SerialNumber", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (serialNumberElement != null)
                                {
                                    string serialNumberInstance = serialNumberElement.Value;
                                    devicePropertiesInstance.SerialNumber = serialNumberInstance;
                                }
                                
                                XElement cultureElement = devicePropertiesElement.Element(XName.Get("Culture", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (cultureElement != null)
                                {
                                    string cultureInstance = cultureElement.Value;
                                    devicePropertiesInstance.Culture = cultureInstance;
                                }
                                
                                XElement timeZoneElement = devicePropertiesElement.Element(XName.Get("TimeZone", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (timeZoneElement != null)
                                {
                                    string timeZoneInstance = timeZoneElement.Value;
                                    devicePropertiesInstance.TimeZone = timeZoneInstance;
                                }
                                
                                XElement descriptionElement = devicePropertiesElement.Element(XName.Get("Description", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    devicePropertiesInstance.Description = descriptionInstance;
                                }
                                
                                XElement modelDescriptionElement = devicePropertiesElement.Element(XName.Get("ModelDescription", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (modelDescriptionElement != null)
                                {
                                    string modelDescriptionInstance = modelDescriptionElement.Value;
                                    devicePropertiesInstance.ModelDescription = modelDescriptionInstance;
                                }
                                
                                XElement totalStorageInBytesElement = devicePropertiesElement.Element(XName.Get("TotalStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (totalStorageInBytesElement != null)
                                {
                                    long totalStorageInBytesInstance = long.Parse(totalStorageInBytesElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.TotalStorageInBytes = totalStorageInBytesInstance;
                                }
                                
                                XElement availableStorageInBytesElement = devicePropertiesElement.Element(XName.Get("AvailableStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (availableStorageInBytesElement != null)
                                {
                                    long availableStorageInBytesInstance = long.Parse(availableStorageInBytesElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.AvailableStorageInBytes = availableStorageInBytesInstance;
                                }
                                
                                XElement provisionedStorageInBytesElement = devicePropertiesElement.Element(XName.Get("ProvisionedStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (provisionedStorageInBytesElement != null)
                                {
                                    long provisionedStorageInBytesInstance = long.Parse(provisionedStorageInBytesElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.ProvisionedStorageInBytes = provisionedStorageInBytesInstance;
                                }
                                
                                XElement usingStorageInBytesElement = devicePropertiesElement.Element(XName.Get("UsingStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (usingStorageInBytesElement != null)
                                {
                                    long usingStorageInBytesInstance = long.Parse(usingStorageInBytesElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.UsingStorageInBytes = usingStorageInBytesInstance;
                                }
                                
                                XElement isConfigUpdatedElement = devicePropertiesElement.Element(XName.Get("IsConfigUpdated", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isConfigUpdatedElement != null)
                                {
                                    bool isConfigUpdatedInstance = bool.Parse(isConfigUpdatedElement.Value);
                                    devicePropertiesInstance.IsConfigUpdated = isConfigUpdatedInstance;
                                }
                                
                                XElement nNicCardsElement = devicePropertiesElement.Element(XName.Get("NNicCards", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (nNicCardsElement != null)
                                {
                                    int nNicCardsInstance = int.Parse(nNicCardsElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.NNicCards = nNicCardsInstance;
                                }
                                
                                XElement dataContainerCountElement = devicePropertiesElement.Element(XName.Get("DataContainerCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (dataContainerCountElement != null)
                                {
                                    int dataContainerCountInstance = int.Parse(dataContainerCountElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.DataContainerCount = dataContainerCountInstance;
                                }
                                
                                XElement volumeCountElement = devicePropertiesElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (volumeCountElement != null)
                                {
                                    int volumeCountInstance = int.Parse(volumeCountElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.VolumeCount = volumeCountInstance;
                                }
                                
                                XElement aCRCountElement = devicePropertiesElement.Element(XName.Get("ACRCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (aCRCountElement != null)
                                {
                                    int aCRCountInstance = int.Parse(aCRCountElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.ACRCount = aCRCountInstance;
                                }
                                
                                XElement cloudCredCountElement = devicePropertiesElement.Element(XName.Get("CloudCredCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (cloudCredCountElement != null)
                                {
                                    int cloudCredCountInstance = int.Parse(cloudCredCountElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.CloudCredCount = cloudCredCountInstance;
                                }
                                
                                XElement targetIQNElement = devicePropertiesElement.Element(XName.Get("TargetIQN", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (targetIQNElement != null)
                                {
                                    string targetIQNInstance = targetIQNElement.Value;
                                    devicePropertiesInstance.TargetIQN = targetIQNInstance;
                                }
                                
                                XElement deviceSoftwareVersionElement = devicePropertiesElement.Element(XName.Get("DeviceSoftwareVersion", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (deviceSoftwareVersionElement != null)
                                {
                                    string deviceSoftwareVersionInstance = deviceSoftwareVersionElement.Value;
                                    devicePropertiesInstance.DeviceSoftwareVersion = deviceSoftwareVersionInstance;
                                }
                                
                                XElement activationTimeElement = devicePropertiesElement.Element(XName.Get("ActivationTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (activationTimeElement != null)
                                {
                                    DateTime activationTimeInstance = DateTime.Parse(activationTimeElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.ActivationTime = activationTimeInstance;
                                }
                                
                                XElement typeElement = devicePropertiesElement.Element(XName.Get("Type", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (typeElement != null)
                                {
                                    DeviceType typeInstance = ((DeviceType)Enum.Parse(typeof(DeviceType), typeElement.Value, true));
                                    devicePropertiesInstance.Type = typeInstance;
                                }
                                
                                XElement currentControllerElement = devicePropertiesElement.Element(XName.Get("CurrentController", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (currentControllerElement != null)
                                {
                                    ControllerId currentControllerInstance = ((ControllerId)Enum.Parse(typeof(ControllerId), currentControllerElement.Value, true));
                                    devicePropertiesInstance.CurrentController = currentControllerInstance;
                                }
                                
                                XElement activeControllerElement = devicePropertiesElement.Element(XName.Get("ActiveController", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (activeControllerElement != null)
                                {
                                    ControllerId activeControllerInstance = ((ControllerId)Enum.Parse(typeof(ControllerId), activeControllerElement.Value, true));
                                    devicePropertiesInstance.ActiveController = activeControllerInstance;
                                }
                                
                                XElement isVirtualApplianceInterimEntryElement = devicePropertiesElement.Element(XName.Get("IsVirtualApplianceInterimEntry", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isVirtualApplianceInterimEntryElement != null)
                                {
                                    bool isVirtualApplianceInterimEntryInstance = bool.Parse(isVirtualApplianceInterimEntryElement.Value);
                                    devicePropertiesInstance.IsVirtualApplianceInterimEntry = isVirtualApplianceInterimEntryInstance;
                                }
                                
                                XElement locationElement = devicePropertiesElement.Element(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (locationElement != null)
                                {
                                    string locationInstance = locationElement.Value;
                                    devicePropertiesInstance.Location = locationInstance;
                                }
                            }
                            
                            XElement timeServerElement = deviceDetailsElement.Element(XName.Get("TimeServer", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (timeServerElement != null)
                            {
                                TimeSettings timeServerInstance = new TimeSettings();
                                deviceDetailsInstance.TimeServer = timeServerInstance;
                                
                                XElement primaryElement = timeServerElement.Element(XName.Get("Primary", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (primaryElement != null)
                                {
                                    string primaryInstance = primaryElement.Value;
                                    timeServerInstance.Primary = primaryInstance;
                                }
                                
                                XElement secondarySequenceElement = timeServerElement.Element(XName.Get("Secondary", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (secondarySequenceElement != null)
                                {
                                    foreach (XElement secondaryElement in secondarySequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        timeServerInstance.Secondary.Add(secondaryElement.Value);
                                    }
                                }
                                
                                XElement friendlyNameElement2 = timeServerElement.Element(XName.Get("FriendlyName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (friendlyNameElement2 != null)
                                {
                                    string friendlyNameInstance2 = friendlyNameElement2.Value;
                                    timeServerInstance.TimeZone = friendlyNameInstance2;
                                }
                            }
                            
                            XElement dnsServerElement = deviceDetailsElement.Element(XName.Get("DnsServer", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (dnsServerElement != null)
                            {
                                DnsServerSettings dnsServerInstance = new DnsServerSettings();
                                deviceDetailsInstance.DnsServer = dnsServerInstance;
                                
                                XElement primaryIPv4Element = dnsServerElement.Element(XName.Get("PrimaryIPv4", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (primaryIPv4Element != null)
                                {
                                    string primaryIPv4Instance = primaryIPv4Element.Value;
                                    dnsServerInstance.PrimaryIPv4 = primaryIPv4Instance;
                                }
                                
                                XElement primaryIPv4Element2 = dnsServerElement.Element(XName.Get("PrimaryIPv4", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (primaryIPv4Element2 != null)
                                {
                                    string primaryIPv4Instance2 = primaryIPv4Element2.Value;
                                    dnsServerInstance.PrimaryIPv6 = primaryIPv4Instance2;
                                }
                                
                                XElement secondaryIPv4SequenceElement = dnsServerElement.Element(XName.Get("SecondaryIPv4", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (secondaryIPv4SequenceElement != null)
                                {
                                    foreach (XElement secondaryIPv4Element in secondaryIPv4SequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        dnsServerInstance.SecondaryIPv4.Add(secondaryIPv4Element.Value);
                                    }
                                }
                                
                                XElement secondaryIPv6SequenceElement = dnsServerElement.Element(XName.Get("SecondaryIPv6", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (secondaryIPv6SequenceElement != null)
                                {
                                    foreach (XElement secondaryIPv6Element in secondaryIPv6SequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        dnsServerInstance.SecondaryIPv6.Add(secondaryIPv6Element.Value);
                                    }
                                }
                            }
                            
                            XElement webProxyElement = deviceDetailsElement.Element(XName.Get("WebProxy", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (webProxyElement != null)
                            {
                                WebProxySettings webProxyInstance = new WebProxySettings();
                                deviceDetailsInstance.WebProxy = webProxyInstance;
                                
                                XElement connectionURIElement = webProxyElement.Element(XName.Get("ConnectionURI", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (connectionURIElement != null)
                                {
                                    string connectionURIInstance = connectionURIElement.Value;
                                    webProxyInstance.ConnectionURI = connectionURIInstance;
                                }
                                
                                XElement authenticationElement = webProxyElement.Element(XName.Get("Authentication", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (authenticationElement != null)
                                {
                                    AuthenticationType authenticationInstance = ((AuthenticationType)Enum.Parse(typeof(AuthenticationType), authenticationElement.Value, true));
                                    webProxyInstance.Authentication = authenticationInstance;
                                }
                                
                                XElement usernameElement = webProxyElement.Element(XName.Get("Username", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (usernameElement != null)
                                {
                                    string usernameInstance = usernameElement.Value;
                                    webProxyInstance.Username = usernameInstance;
                                }
                            }
                            
                            XElement chapElement = deviceDetailsElement.Element(XName.Get("Chap", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (chapElement != null)
                            {
                                ChapSettings chapInstance = new ChapSettings();
                                deviceDetailsInstance.Chap = chapInstance;
                                
                                XElement initiatorUserElement = chapElement.Element(XName.Get("InitiatorUser", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (initiatorUserElement != null)
                                {
                                    string initiatorUserInstance = initiatorUserElement.Value;
                                    chapInstance.InitiatorUser = initiatorUserInstance;
                                }
                                
                                XElement initiatorSecretElement = chapElement.Element(XName.Get("InitiatorSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (initiatorSecretElement != null)
                                {
                                    string initiatorSecretInstance = initiatorSecretElement.Value;
                                    chapInstance.InitiatorSecret = initiatorSecretInstance;
                                }
                                
                                XElement targetUserElement = chapElement.Element(XName.Get("TargetUser", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (targetUserElement != null)
                                {
                                    string targetUserInstance = targetUserElement.Value;
                                    chapInstance.TargetUser = targetUserInstance;
                                }
                                
                                XElement targetSecretElement = chapElement.Element(XName.Get("TargetSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (targetSecretElement != null)
                                {
                                    string targetSecretInstance = targetSecretElement.Value;
                                    chapInstance.TargetSecret = targetSecretInstance;
                                }
                            }
                            
                            XElement snapshotElement = deviceDetailsElement.Element(XName.Get("Snapshot", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (snapshotElement != null)
                            {
                                SnapshotSettings snapshotInstance = new SnapshotSettings();
                                deviceDetailsInstance.Snapshot = snapshotInstance;
                                
                                XElement snapshotSecretElement = snapshotElement.Element(XName.Get("SnapshotSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (snapshotSecretElement != null)
                                {
                                    string snapshotSecretInstance = snapshotSecretElement.Value;
                                    snapshotInstance.SnapshotSecret = snapshotSecretInstance;
                                }
                                
                                XElement isSnapshotSecretSetElement = snapshotElement.Element(XName.Get("IsSnapshotSecretSet", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isSnapshotSecretSetElement != null)
                                {
                                    bool isSnapshotSecretSetInstance = bool.Parse(isSnapshotSecretSetElement.Value);
                                    snapshotInstance.IsSnapshotSecretSet = isSnapshotSecretSetInstance;
                                }
                            }
                            
                            XElement alertNotificationElement = deviceDetailsElement.Element(XName.Get("AlertNotification", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (alertNotificationElement != null)
                            {
                                AlertNotificationSettings alertNotificationInstance = new AlertNotificationSettings();
                                deviceDetailsInstance.AlertNotification = alertNotificationInstance;
                                
                                XElement alertNotifcationEnabledElement = alertNotificationElement.Element(XName.Get("AlertNotifcationEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (alertNotifcationEnabledElement != null)
                                {
                                    bool alertNotifcationEnabledInstance = bool.Parse(alertNotifcationEnabledElement.Value);
                                    alertNotificationInstance.AlertNotifcationEnabled = alertNotifcationEnabledInstance;
                                }
                                
                                XElement alertNotifcationCultureElement = alertNotificationElement.Element(XName.Get("AlertNotifcationCulture", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (alertNotifcationCultureElement != null)
                                {
                                    string alertNotifcationCultureInstance = alertNotifcationCultureElement.Value;
                                    alertNotificationInstance.AlertNotifcationCulture = alertNotifcationCultureInstance;
                                }
                            }
                            
                            XElement netInterfaceListSequenceElement = deviceDetailsElement.Element(XName.Get("NetInterfaceList", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (netInterfaceListSequenceElement != null)
                            {
                                foreach (XElement netInterfaceListElement in netInterfaceListSequenceElement.Elements(XName.Get("NetInterface", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    NetInterface netInterfaceInstance = new NetInterface();
                                    deviceDetailsInstance.NetInterfaceList.Add(netInterfaceInstance);
                                    
                                    XElement interfaceIdElement = netInterfaceListElement.Element(XName.Get("InterfaceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (interfaceIdElement != null)
                                    {
                                        NetInterfaceId interfaceIdInstance = ((NetInterfaceId)Enum.Parse(typeof(NetInterfaceId), interfaceIdElement.Value, true));
                                        netInterfaceInstance.InterfaceId = interfaceIdInstance;
                                    }
                                    
                                    XElement isEnabledElement = netInterfaceListElement.Element(XName.Get("IsEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isEnabledElement != null)
                                    {
                                        bool isEnabledInstance = bool.Parse(isEnabledElement.Value);
                                        netInterfaceInstance.IsEnabled = isEnabledInstance;
                                    }
                                    
                                    XElement isDefaultElement = netInterfaceListElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isDefaultElement != null)
                                    {
                                        bool isDefaultInstance = bool.Parse(isDefaultElement.Value);
                                        netInterfaceInstance.IsDefault = isDefaultInstance;
                                    }
                                    
                                    XElement isCloudEnabledElement = netInterfaceListElement.Element(XName.Get("IsCloudEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isCloudEnabledElement != null)
                                    {
                                        bool isCloudEnabledInstance = bool.Parse(isCloudEnabledElement.Value);
                                        netInterfaceInstance.IsCloudEnabled = isCloudEnabledInstance;
                                    }
                                    
                                    XElement isIScsiEnabledElement = netInterfaceListElement.Element(XName.Get("IsIScsiEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isIScsiEnabledElement != null)
                                    {
                                        bool isIScsiEnabledInstance = bool.Parse(isIScsiEnabledElement.Value);
                                        netInterfaceInstance.IsIScsiEnabled = isIScsiEnabledInstance;
                                    }
                                    
                                    XElement speedElement = netInterfaceListElement.Element(XName.Get("Speed", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (speedElement != null)
                                    {
                                        long speedInstance = long.Parse(speedElement.Value, CultureInfo.InvariantCulture);
                                        netInterfaceInstance.Speed = speedInstance;
                                    }
                                    
                                    XElement mediaConnectStateElement = netInterfaceListElement.Element(XName.Get("MediaConnectState", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (mediaConnectStateElement != null)
                                    {
                                        int mediaConnectStateInstance = int.Parse(mediaConnectStateElement.Value, CultureInfo.InvariantCulture);
                                        netInterfaceInstance.MediaConnectState = mediaConnectStateInstance;
                                    }
                                    
                                    XElement modeElement = netInterfaceListElement.Element(XName.Get("Mode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (modeElement != null)
                                    {
                                        NetworkMode modeInstance = ((NetworkMode)Enum.Parse(typeof(NetworkMode), modeElement.Value, true));
                                        netInterfaceInstance.Mode = modeInstance;
                                    }
                                    
                                    XElement nicIPv4SettingsElement = netInterfaceListElement.Element(XName.Get("NicIPv4Settings", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nicIPv4SettingsElement != null)
                                    {
                                        NicIPv4 nicIPv4SettingsInstance = new NicIPv4();
                                        netInterfaceInstance.NicIPv4Settings = nicIPv4SettingsInstance;
                                        
                                        XElement iPv4AddressElement = nicIPv4SettingsElement.Element(XName.Get("IPv4Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv4AddressElement != null)
                                        {
                                            string iPv4AddressInstance = iPv4AddressElement.Value;
                                            nicIPv4SettingsInstance.IPv4Address = iPv4AddressInstance;
                                        }
                                        
                                        XElement iPv4NetmaskElement = nicIPv4SettingsElement.Element(XName.Get("IPv4Netmask", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv4NetmaskElement != null)
                                        {
                                            string iPv4NetmaskInstance = iPv4NetmaskElement.Value;
                                            nicIPv4SettingsInstance.IPv4Netmask = iPv4NetmaskInstance;
                                        }
                                        
                                        XElement iPv4GatewayElement = nicIPv4SettingsElement.Element(XName.Get("IPv4Gateway", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv4GatewayElement != null)
                                        {
                                            string iPv4GatewayInstance = iPv4GatewayElement.Value;
                                            nicIPv4SettingsInstance.IPv4Gateway = iPv4GatewayInstance;
                                        }
                                        
                                        XElement controller0IPv4AddressElement = nicIPv4SettingsElement.Element(XName.Get("Controller0IPv4Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (controller0IPv4AddressElement != null)
                                        {
                                            string controller0IPv4AddressInstance = controller0IPv4AddressElement.Value;
                                            nicIPv4SettingsInstance.Controller0IPv4Address = controller0IPv4AddressInstance;
                                        }
                                        
                                        XElement controller1IPv4AddressElement = nicIPv4SettingsElement.Element(XName.Get("Controller1IPv4Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (controller1IPv4AddressElement != null)
                                        {
                                            string controller1IPv4AddressInstance = controller1IPv4AddressElement.Value;
                                            nicIPv4SettingsInstance.Controller1IPv4Address = controller1IPv4AddressInstance;
                                        }
                                    }
                                    
                                    XElement nicIPv6SettingsElement = netInterfaceListElement.Element(XName.Get("NicIPv6Settings", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nicIPv6SettingsElement != null)
                                    {
                                        NicIPv6 nicIPv6SettingsInstance = new NicIPv6();
                                        netInterfaceInstance.NicIPv6Settings = nicIPv6SettingsInstance;
                                        
                                        XElement iPv6AddressElement = nicIPv6SettingsElement.Element(XName.Get("IPv6Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv6AddressElement != null)
                                        {
                                            string iPv6AddressInstance = iPv6AddressElement.Value;
                                            nicIPv6SettingsInstance.IPv6Address = iPv6AddressInstance;
                                        }
                                        
                                        XElement iPv6PrefixElement = nicIPv6SettingsElement.Element(XName.Get("IPv6Prefix", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv6PrefixElement != null)
                                        {
                                            string iPv6PrefixInstance = iPv6PrefixElement.Value;
                                            nicIPv6SettingsInstance.IPv6Prefix = iPv6PrefixInstance;
                                        }
                                        
                                        XElement iPv6GatewayElement = nicIPv6SettingsElement.Element(XName.Get("IPv6Gateway", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv6GatewayElement != null)
                                        {
                                            string iPv6GatewayInstance = iPv6GatewayElement.Value;
                                            nicIPv6SettingsInstance.IPv6Gateway = iPv6GatewayInstance;
                                        }
                                        
                                        XElement controller0IPv6AddressElement = nicIPv6SettingsElement.Element(XName.Get("Controller0IPv6Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (controller0IPv6AddressElement != null)
                                        {
                                            string controller0IPv6AddressInstance = controller0IPv6AddressElement.Value;
                                            nicIPv6SettingsInstance.Controller0IPv6Address = controller0IPv6AddressInstance;
                                        }
                                        
                                        XElement controller1IPv6AddressElement = nicIPv6SettingsElement.Element(XName.Get("Controller1IPv6Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (controller1IPv6AddressElement != null)
                                        {
                                            string controller1IPv6AddressInstance = controller1IPv6AddressElement.Value;
                                            nicIPv6SettingsInstance.Controller1IPv6Address = controller1IPv6AddressInstance;
                                        }
                                    }
                                }
                            }
                            
                            XElement operationInProgressElement = deviceDetailsElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (operationInProgressElement != null)
                            {
                                OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                deviceDetailsInstance.OperationInProgress = operationInProgressInstance;
                            }
                            
                            XElement nameElement = deviceDetailsElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                deviceDetailsInstance.Name = nameInstance;
                            }
                            
                            XElement instanceIdElement = deviceDetailsElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (instanceIdElement != null)
                            {
                                string instanceIdInstance = instanceIdElement.Value;
                                deviceDetailsInstance.InstanceId = instanceIdInstance;
                            }
                            
                            XElement secretEncryptionCertThumbprintElement = deviceDetailsElement.Element(XName.Get("SecretEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (secretEncryptionCertThumbprintElement != null)
                            {
                                string secretEncryptionCertThumbprintInstance = secretEncryptionCertThumbprintElement.Value;
                                deviceDetailsInstance.SecretEncryptionCertThumbprint = secretEncryptionCertThumbprintInstance;
                            }
                            
                            XElement deviceTypeElement = deviceDetailsElement.Element(XName.Get("DeviceType", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (deviceTypeElement != null)
                            {
                                DeviceType deviceTypeInstance = ((DeviceType)Enum.Parse(typeof(DeviceType), deviceTypeElement.Value, true));
                                deviceDetailsInstance.Type = deviceTypeInstance;
                            }
                            
                            XElement remoteMinishellSecretInfoElement = deviceDetailsElement.Element(XName.Get("RemoteMinishellSecretInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (remoteMinishellSecretInfoElement != null)
                            {
                                RemoteMinishellSettings remoteMinishellSecretInfoInstance = new RemoteMinishellSettings();
                                deviceDetailsInstance.RemoteMinishellSecretInfo = remoteMinishellSecretInfoInstance;
                                
                                XElement minishellSecretElement = remoteMinishellSecretInfoElement.Element(XName.Get("MinishellSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (minishellSecretElement != null)
                                {
                                    string minishellSecretInstance = minishellSecretElement.Value;
                                    remoteMinishellSecretInfoInstance.MinishellSecret = minishellSecretInstance;
                                }
                                
                                XElement isMinishellSecretSetElement = remoteMinishellSecretInfoElement.Element(XName.Get("IsMinishellSecretSet", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isMinishellSecretSetElement != null)
                                {
                                    bool isMinishellSecretSetInstance = bool.Parse(isMinishellSecretSetElement.Value);
                                    remoteMinishellSecretInfoInstance.IsMinishellSecretSet = isMinishellSecretSetInstance;
                                }
                            }
                            
                            XElement remoteMgmtSettingsInfoElement = deviceDetailsElement.Element(XName.Get("RemoteMgmtSettingsInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (remoteMgmtSettingsInfoElement != null)
                            {
                                RemoteManagementSettings remoteMgmtSettingsInfoInstance = new RemoteManagementSettings();
                                deviceDetailsInstance.RemoteMgmtSettingsInfo = remoteMgmtSettingsInfoInstance;
                                
                                XElement remoteManagementModeElement = remoteMgmtSettingsInfoElement.Element(XName.Get("RemoteManagementMode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (remoteManagementModeElement != null)
                                {
                                    RemoteManagementModeConfiguration remoteManagementModeInstance = ((RemoteManagementModeConfiguration)Enum.Parse(typeof(RemoteManagementModeConfiguration), remoteManagementModeElement.Value, true));
                                    remoteMgmtSettingsInfoInstance.RemoteManagementMode = remoteManagementModeInstance;
                                }
                            }
                            
                            XElement virtualAppliancePropertiesElement = deviceDetailsElement.Element(XName.Get("VirtualApplianceProperties", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (virtualAppliancePropertiesElement != null)
                            {
                                VirtualApplianceInfo virtualAppliancePropertiesInstance = new VirtualApplianceInfo();
                                deviceDetailsInstance.VirtualApplianceProperties = virtualAppliancePropertiesInstance;
                                
                                XElement dnsNameElement = virtualAppliancePropertiesElement.Element(XName.Get("DnsName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (dnsNameElement != null)
                                {
                                    string dnsNameInstance = dnsNameElement.Value;
                                    virtualAppliancePropertiesInstance.DnsName = dnsNameInstance;
                                }
                                
                                XElement virtualNetworkNameElement = virtualAppliancePropertiesElement.Element(XName.Get("VirtualNetworkName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (virtualNetworkNameElement != null)
                                {
                                    string virtualNetworkNameInstance = virtualNetworkNameElement.Value;
                                    virtualAppliancePropertiesInstance.VirtualNetworkName = virtualNetworkNameInstance;
                                }
                                
                                XElement subnetNameElement = virtualAppliancePropertiesElement.Element(XName.Get("SubnetName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (subnetNameElement != null)
                                {
                                    string subnetNameInstance = subnetNameElement.Value;
                                    virtualAppliancePropertiesInstance.SubnetName = subnetNameInstance;
                                }
                                
                                XElement internalIpAddressElement = virtualAppliancePropertiesElement.Element(XName.Get("InternalIpAddress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (internalIpAddressElement != null)
                                {
                                    string internalIpAddressInstance = internalIpAddressElement.Value;
                                    virtualAppliancePropertiesInstance.InternalIpAddress = internalIpAddressInstance;
                                }
                                
                                XElement publicIpAddressElement = virtualAppliancePropertiesElement.Element(XName.Get("PublicIpAddress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (publicIpAddressElement != null)
                                {
                                    string publicIpAddressInstance = publicIpAddressElement.Value;
                                    virtualAppliancePropertiesInstance.PublicIpAddress = publicIpAddressInstance;
                                }
                                
                                XElement regionElement = virtualAppliancePropertiesElement.Element(XName.Get("Region", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (regionElement != null)
                                {
                                    string regionInstance = regionElement.Value;
                                    virtualAppliancePropertiesInstance.Region = regionInstance;
                                }
                                
                                XElement encodedServiceEncryptionKeyElement = virtualAppliancePropertiesElement.Element(XName.Get("EncodedServiceEncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (encodedServiceEncryptionKeyElement != null)
                                {
                                    string encodedServiceEncryptionKeyInstance = encodedServiceEncryptionKeyElement.Value;
                                    virtualAppliancePropertiesInstance.EncodedServiceEncryptionKey = encodedServiceEncryptionKeyInstance;
                                }
                                
                                XElement encodedChannelIntegrityKeyElement = virtualAppliancePropertiesElement.Element(XName.Get("EncodedChannelIntegrityKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (encodedChannelIntegrityKeyElement != null)
                                {
                                    string encodedChannelIntegrityKeyInstance = encodedChannelIntegrityKeyElement.Value;
                                    virtualAppliancePropertiesInstance.EncodedChannelIntegrityKey = encodedChannelIntegrityKeyInstance;
                                }
                                
                                XElement isServiceEncryptionKeySetElement = virtualAppliancePropertiesElement.Element(XName.Get("IsServiceEncryptionKeySet", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isServiceEncryptionKeySetElement != null)
                                {
                                    bool isServiceEncryptionKeySetInstance = bool.Parse(isServiceEncryptionKeySetElement.Value);
                                    virtualAppliancePropertiesInstance.IsServiceEncryptionKeySet = isServiceEncryptionKeySetInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
